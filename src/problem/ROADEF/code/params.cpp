#include <iomanip>
#include "params.hpp"

std::string INPUT_PATH{""};
std::string OUTPUT_PATH{"solution.txt"};
// std::default_random_engine ENGINE {1};
uint_t TIME_LIMIT{15 * 60 * 1000 - TIME_RESERVE};
bool RETURN_ID{false};
int SEED{1};
std::chrono::steady_clock::time_point BEGIN{std::chrono::steady_clock::now()};
uint_t sol_progress_cnt{0};

// DEPENDENT PARAMETERS - COEFFICIENTS
int ITERS_MAX{5000};
double ITERS_MAX_offset_short{-132387.33725217817};
vector<double> ITERS_MAX_coefs_short{0.3711242838091101, 0.06037866677049974, -0.038298749342924876, 23.281039220625363, 6.730059746331269, -19.553434766725598, 2.1011251019071153, -9.100208260207726, -10.882464476749982, -0.057837550300123955, -0.35693855379151634, 0.10504112250887902, 0.3915156237612839, 0.6315925695352267, -0.06684127245496381, -0.11435772184138139, -0.40603884860856565, -0.22884957622985075, 0.02692727440026449};
double ITERS_MAX_offset_long{-69168.28474779033};
vector<double> ITERS_MAX_coefs_long{0.2315095784733028, -0.016424387118028672, -0.031032115076917135, 14.221097830380671, 1.7881215539492878, -13.636464926512865, 0.7897372779574906, -3.9290031685466147, -8.237819383508963, -0.014629675407679966, -0.26492884488270374, 0.001537482039245921, 0.3141665401977723, 0.4731870928521315, 0.02535453667890795, -0.07790828829948063, -0.3547637296704685, -0.15153124925049366, -0.00525490691684613};

double ALNS_DEPTH{0.5};
double ALNS_DEPTH_offset_short = 2.2565786832210044;
vector<double> ALNS_DEPTH_coefs_short{-3.938533317788206e-06, -1.225904711273274e-05, 7.70984356069953e-07, -0.0001499964770224596, -0.0004794682309498264, 0.0001397275186915966, -7.73128632424617e-06, 0.0006775269730241681, -0.00011301254801236743, -1.8986014600286028e-07, 5.47645461794425e-06, 1.384193625727385e-06, -3.731633837223647e-06, -1.0805459407032579e-05, -1.6226256470787303e-06, 1.824358123709445e-06, 2.4336476810660435e-06, 5.5043512069429e-06, 5.796094278748545e-07};
double ALNS_DEPTH_offset_long = 1.275249263876141;
vector<double> ALNS_DEPTH_coefs_long{-4.3170073269417296e-06, 2.1734452540097378e-06, 1.340419877396352e-06, -0.00019684191742605885, 5.7691969297836996e-05, 0.00039348378086818156, -1.92445965371153e-05, 2.7379148424101673e-05, 0.0002557029862102428, -1.7604484608358768e-07, 2.5889097933042607e-06, 3.045706989979046e-07, -4.042543621115179e-06, -4.130212051017159e-06, -6.596775676246115e-07, -4.910758658647703e-07, 8.128833985528766e-06, -1.6846162305735907e-06, 9.549429036678053e-08};

double LENGTH_BATCH{0.25};
double LENGTH_BATCH_offset_short = -1.6671047473946885;
vector<double> LENGTH_BATCH_coefs_short{4.706744766799759e-06, -4.1534682442773446e-06, 2.928849851198463e-08, 0.0003695659086561479, -7.060348544948096e-05, -0.0002264997918610723, 4.680992039698666e-05, 0.00016222020085028316, -0.0002136666979814175, -3.751949127083885e-07, -7.092501833066117e-06, -5.514682688926136e-07, 7.61718271482494e-06, 1.3504334653195952e-05, 1.3793881754056041e-06, -2.1403760365599207e-06, -7.860798879670469e-06, -6.0340643405509375e-06, -3.941501500645462e-07};
double LENGTH_BATCH_offset_long = 10.935256953707864;
vector<double> LENGTH_BATCH_coefs_long{-2.6845084625618048e-05, -7.722841114319042e-06, 2.934038911439662e-06, -0.0016383843298444782, -0.0006210054295683354, 0.001423890735548247, -0.0001951084721251257, 0.0007951301133392393, 0.0007503743665920252, 5.078516091057236e-06, 2.171418084293891e-05, -1.1047916517255486e-05, -2.2033207316310353e-05, -3.808673086676057e-05, 8.649649585534718e-06, 6.078594558692861e-06, 2.378017900908631e-05, 1.3185419355366084e-05, -3.2607875606726957e-06};

double COST_BATCH{0.25};
double COST_BATCH_offset_short = -8.180533725419679;
vector<double> COST_BATCH_coefs_short{2.395468961242785e-05, -6.899992334706591e-06, -2.1490784997328507e-06, 0.0015967456902050699, 4.640569902695748e-05, -0.0013184268450255072, 0.00012725041583364568, -6.425407031037033e-05, -0.0009048250230895849, -5.215780048680589e-06, -1.826402675964404e-05, 1.1529924593257794e-05, 2.127450597942753e-05, 3.1101929760291116e-05, -9.045982719267224e-06, -5.118311881778864e-06, -2.3834367886425512e-05, -9.467872125301795e-06, 3.411554495001308e-06};
double COST_BATCH_offset_long = 3.5980549914017015;
vector<double> COST_BATCH_coefs_long{-5.254918706255786e-06, -1.0311516545341312e-05, 4.1433569769946906e-07, -0.00027494809458593344, -0.0004702634669782255, 0.00018789328877809018, -9.432353923826236e-05, 0.0005208873776316092, -2.563821532024087e-05, 6.760731470899843e-07, 6.161701385826757e-06, -8.974936492141463e-07, -3.80195493657273e-06, -1.1998360071311522e-05, 5.278555939608102e-07, 1.8704332850681055e-06, 2.5916484607663043e-06, 6.425231850077695e-06, -1.9294943128295955e-07};

double RD_BATCH{0.25};
double RD_BATCH_offset_short = -3.9062118958392373;
vector<double> RD_BATCH_coefs_short{9.551976533387064e-06, 1.9254233113160786e-05, -1.3946807568881325e-06, 0.0004574973065769134, 0.0008132941363560896, -0.000392279992946814, 6.728846877249891e-05, -0.001084734502488114, 6.100102955109156e-05, -2.125062270691804e-06, -6.194199325012838e-06, 5.269284696570076e-06, 3.853801243231583e-06, 1.0650847224293149e-05, -4.8734588629259765e-06, -3.0384408625133238e-06, -8.51832449183916e-07, -5.226025473873313e-06, 1.6392766508940809e-06};
double RD_BATCH_offset_long = -6.236688076674413;
vector<double> RD_BATCH_coefs_long{1.7359418368519293e-05, 1.1190091925505405e-05, -2.6008892340140316e-06, 0.0009582531769263125, 0.0005991989690535258, -0.0009596452869447471, 0.00010893559323284791, -0.0008613462530579387, -0.0003982672349990953, -1.9004217336470222e-06, -1.5848408667119094e-05, 3.2820852873683577e-06, 1.6508349752511416e-05, 2.7949079179551434e-05, -1.761296608379237e-06, -4.8906202333653925e-06, -1.7806735031663443e-05, -9.167599232674073e-06, 7.754723666124594e-07};

double ACCEPT_TOLERANCE{0.01};
double ACCEPT_TOLERANCE_offset_short = 29.028524135672487;
vector<double> ACCEPT_TOLERANCE_coefs_short{-7.556905354509968e-05, 4.5310167307994246e-05, 5.945601203581797e-06, -0.005211231207855318, 0.0006279006730332645, 0.00433641682996017, -0.0005617627036244396, -0.0010747624496987255, 0.0033771094512609606, 1.388560071033774e-05, 6.684211591953377e-05, -2.7449516098117775e-05, -7.6788117473537e-05, -0.00011784180421102926, 1.8700611646234136e-05, 1.4172460384845643e-05, 9.360429901292386e-05, 3.649249388766892e-05, -7.70126599398591e-06};
double ACCEPT_TOLERANCE_offset_long = 46.55873689205491;
vector<double> ACCEPT_TOLERANCE_coefs_long{-0.0001102106321361954, -7.410669583466116e-06, 7.400756123325277e-06, -0.0073059692072053985, -0.0018475817800050435, 0.005414519725354603, -0.0009039638129292283, 0.0017652690114768538, 0.0032911605782259524, 1.8209516129478557e-05, 0.00011555181652301242, -3.011978206057064e-05, -0.00011575254833190814, -0.00021238203112064702, 1.8064991776569194e-05, 3.478224912968958e-05, 0.00011633443464769352, 8.928422433145735e-05, -7.6027906248093545e-06};
vector<double> ACCEPT_TOLERANCE_values{0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001};

double OMEGA_1{0.25};
double OMEGA_1_offset_short = 363.25641297872926;
vector<double> OMEGA_1_coefs_short{-0.000983514585100586, 0.001414660764961497, 7.864728948455255e-05, -0.07276223274398387, 0.0392800054719479, 0.06408039122805517, -0.005067845317932326, -0.051230678266660314, 0.06059736889753928, 0.0001135212249074325, 0.0010585905062551497, -0.00013220772828565353, -0.0014173660697410304, -0.0018639919877346811, -1.367552196582765e-05, 0.0002380345065553429, 0.0017885431330115001, 0.000491860921403856, -1.8483808818276588e-05};
double OMEGA_1_offset_long = 316.55451032240904;
vector<double> OMEGA_1_coefs_long{-0.0007841429069607539, 0.001079669682432831, 3.672586369937913e-05, -0.060258391836288866, 0.028501781816792877, 0.046801318038095674, -0.004580602820702881, -0.040521340992797236, 0.04553565046686609, 0.00021113852046752355, 0.0005589914627114294, -0.00048141484964940524, -0.0007615786418499885, -0.0009241841612272283, 0.0003805237860047211, 0.00011537015742738645, 0.0009600331473115358, 0.00021303900501635787, -0.0001452204538702067};

double OMEGA_2{0.25};
double OMEGA_2_offset_short = 341.19819595503634;
vector<double> OMEGA_2_coefs_short{-0.0008994767638604085, 0.0012723566015192006, 3.959711065005906e-05, -0.06952324384571955, 0.03381226323210925, 0.05368812196379081, -0.005407210269582396, -0.048332228523032844, 0.05282250361868971, 8.729719498389084e-05, 0.0011699316403599063, -1.9075364556414224e-05, -0.001469942757501188, -0.0021186474550166983, -0.00012653551719394058, 0.00031147280496497177, 0.0017056493889106876, 0.0007317361979955716, 2.2974288111372583e-05};
double OMEGA_2_offset_long = 428.6223809621147;
vector<double> OMEGA_2_coefs_long{-0.0011190816630975338, 0.0012526601361859087, 5.656543837242446e-05, -0.08384763494689211, 0.03004020172843218, 0.06474811744269691, -0.007136265134565158, -0.044402522877090754, 0.05942091418464078, 0.0002043898126573904, 0.001123989837992419, -0.00035899835897130664, -0.0013916912771497626, -0.0019916974354345705, 0.0002050602106052868, 0.0002764960686582962, 0.0016466528304367358, 0.0006473427755135274, -9.154383918849303e-05};

double OMEGA_4{0.25};
double OMEGA_4_offset_short = -134.34843234624924;
vector<double> OMEGA_4_coefs_short{0.00037863804561953196, 0.0012427758303666856, -0.0001289381004830907, 0.007830967234164283, 0.047723141700630536, -0.02242518231893291, 0.003433871388291472, -0.06949208721538438, 0.006557914998617274, 6.042763760803804e-06, -0.0002724064969732455, 1.0266382524492355e-05, 0.00019275398533322405, 0.00044855446152236887, -1.612612560204555e-05, -9.873508717375363e-05, -0.0002014168001035618, -8.156151230650818e-05, 6.930382036685588e-06};
double OMEGA_4_offset_long = -372.8455459458206;
vector<double> OMEGA_4_coefs_long{0.0009030424273378056, 0.0016478898052305797, -0.00016245789033369592, 0.0408639521231975, 0.06992251935083972, -0.04395552441672597, 0.0072429437721694525, -0.09560870291906133, -0.000774764231652285, -9.150465763621795e-05, -0.0008189078581343804, 0.0001786738945037061, 0.0006808794182958963, 0.001458175757445434, -0.000133336346524184, -0.0002944657026920594, -0.0005854575338263432, -0.0005721662130037784, 4.955667354674905e-05};

double LAMBDA{0.25};
double LAMBDA_offset_short = -0.5576852673563784;
vector<double> LAMBDA_coefs_short{5.270159757694123e-06, -1.4022527989841956e-05, -3.964368239897689e-07, 0.00042762597579881154, -0.00044542407186390706, -0.0004051706206097807, 2.7442376472088207e-05, 0.0005803799814111495, -0.0004612253468157557, -6.614136839067317e-07, -5.343134254579781e-06, 9.965638979374939e-07, 8.392190112321153e-06, 9.052533125234205e-06, -1.225350773157261e-07, -6.442267385139241e-07, -1.191703515286424e-05, -1.1825876159755287e-06, 2.2504387495258774e-07};
double LAMBDA_offset_long = 1.3580525498635723;
vector<double> LAMBDA_coefs_long{-5.999999295690702e-07, -9.010097577563281e-06, 3.53059190256173e-07, 4.2246211109623735e-05, -0.0003302480925370888, -1.1257978121741465e-05, -9.53328021395725e-06, 0.0004484364269831352, -0.00014775190320610634, 3.138039318482037e-07, -1.195804327821326e-06, -1.2254569406375588e-06, 2.6954335587105052e-06, 2.3517576952445516e-06, 1.4676279033662262e-06, -1.2510872985978377e-07, -3.801408040690446e-06, -5.977983826461065e-07, -4.4406376511215343e-07};

double ONE_SHIFT_DEPTH{0.5};
double ONE_SHIFT_DEPTH_offset_short = -3.002175258667492;
vector<double> ONE_SHIFT_DEPTH_coefs_short{9.881476303793814e-06, -4.413511255600327e-06, -6.7345300006625e-07, 0.0006914733956338026, -3.548163045545831e-05, -0.0005222763366280422, 4.203888057434091e-05, 5.26020086502915e-05, -0.0003847344905141952, -1.6206550131587335e-06, -1.0281811748476773e-05, 2.5597231455626393e-06, 1.1896171972929105e-05, 1.854931679860747e-05, -1.300076809163851e-06, -3.2720902203139507e-06, -1.2515869334321595e-05, -7.036952884488864e-06, 5.79229669141376e-07};
double ONE_SHIFT_DEPTH_offset_long = 5.338676259748613;
vector<double> ONE_SHIFT_DEPTH_coefs_long{-1.1719253161665252e-05, -3.689002065305515e-06, 1.5053663595825266e-06, -0.0006807262227680365, -0.0002907894073686158, 0.0006700512508222841, -0.00012538537736276985, 0.0003464531934178126, 0.0003589899515462963, 1.021232023255865e-06, 1.2097715392871386e-05, -1.2473325308011311e-06, -1.230345831846656e-05, -2.1963109338566016e-05, 1.2178104575122286e-07, 3.070515221384722e-06, 1.4352823772853434e-05, 7.502278007861276e-06, -2.3304049384363673e-07};

uint_t TWO_SHIFT_LIMIT{5};
double TWO_SHIFT_LIMIT_offset_short = 86.03698511596035;
vector<double> TWO_SHIFT_LIMIT_coefs_short{-0.0001410008286394311, -0.00033262627107994905, 1.7436253622700705e-05, -0.006682238367275409, -0.014073352530262864, 0.0050233596994659945, -0.0015053225271105437, 0.017738569895700235, -0.0019228388645114141, 2.4957471302674078e-05, 0.00012179593974457001, -5.24696886073991e-05, -6.288852048375576e-05, -0.00022932163947743555, 4.669292535532692e-05, 4.777552781609209e-05, 1.4363933820713453e-05, 0.0001256794755130733, -1.574235506505074e-05};
double TWO_SHIFT_LIMIT_offset_long = -52.09196317280069;
vector<double> TWO_SHIFT_LIMIT_coefs_long{0.00019611764225571665, -0.00023854558509566793, -1.1972579255871513e-05, 0.014651275708288041, -0.0061226599574000775, -0.0117548010820826, 0.0009981458367799019, 0.008373626976077384, -0.010853404853506464, -4.142636464635369e-05, -0.00017223453407220682, 8.389001254507443e-05, 0.00022318120181429596, 0.00030008498933585217, -5.778269591764124e-05, -3.798140190645767e-05, -0.0002762143972439688, -8.457703809246228e-05, 2.3572085837807698e-05};

bool LS_FIRST_IMPROVE{false};
double LS_FIRST_IMPROVE_offset_short = 0.14723465978386607;
vector<double> LS_FIRST_IMPROVE_coefs_short{2.454020457233497e-07, -4.333488082004523e-06, -3.6817887241528056e-08, 3.4218924935804566e-05, -0.00014971257421931373, -6.611056169018731e-05, 1.749857058530213e-05, 0.00021156953300242542, -0.00011050118998043666, -1.4819198029067314e-06, 5.112074541128145e-06, 5.179368942951792e-06, -4.8936097390074385e-06, -1.0594069828532158e-05, -5.326682577096175e-06, 2.051012299246867e-06, 3.734836196546932e-06, 5.791237130629361e-06, 1.8292582590766318e-06};
double LS_FIRST_IMPROVE_offset_long = 0.14723465978386607;
vector<double> LS_FIRST_IMPROVE_coefs_long{2.454020457233497e-07, -4.333488082004523e-06, -3.6817887241528056e-08, 3.4218924935804566e-05, -0.00014971257421931373, -6.611056169018731e-05, 1.749857058530213e-05, 0.00021156953300242542, -0.00011050118998043666, -1.4819198029067314e-06, 5.112074541128145e-06, 5.179368942951792e-06, -4.8936097390074385e-06, -1.0594069828532158e-05, -5.326682577096175e-06, 2.051012299246867e-06, 3.734836196546932e-06, 5.791237130629361e-06, 1.8292582590766318e-06};

uint_t BETA_LOWER{1000};
double BETA_LOWER_offset_short = 38607.84342174043;
vector<double> BETA_LOWER_coefs_short{-0.1220888232644369, 0.2675832262084404, 0.009223655724178223, -9.586754047919106, 8.217547903642055, 8.815459261955796, -0.6465995767859205, -10.748118413299398, 9.465826443925208, 0.0291480486703868, 0.07104649986552103, -0.0683933047103638, -0.12658731581240318, -0.10830720628932729, 0.050952698835943985, 0.0030987711132907845, 0.19605688128039317, -0.011071559598047039, -0.020689076661122727};
double BETA_LOWER_offset_long = -4714.891539835224;
vector<double> BETA_LOWER_coefs_long{0.011770775762627358, 0.14042645527999356, -0.007527156987482786, -0.7423708226211322, 5.206515213626231, -0.32769372669831354, 0.39311072453991536, -6.969486951676907, 1.9666255390356586, 0.0061215530165748076, -0.0214600417911818, -0.014613844319711505, 0.004131094740798246, 0.04054550038200781, 0.01193547678573204, -0.009945606872265244, 0.006580392925305736, -0.020668193681401523, -0.004449764623892339};

uint_t BETA_UPPER{1000};
double BETA_UPPER_offset_short = 9746.81488253974;
vector<double> BETA_UPPER_coefs_short{-0.019591419471004564, -0.01919430654714803, 0.002671981264479905, -1.0930104421768352, -0.8940524228026939, 0.940950261357715, -0.039726638625239535, 1.3261421463033118, 0.24577666744769097, 0.009323779915768592, -0.005387752770861964, -0.027050544138316323, 0.00773198259567161, 0.01443613636813115, 0.026494504405665104, -7.180079154240374e-05, -0.010664240428844387, -0.008489470029627695, -0.009033981761401992};
double BETA_UPPER_offset_long = 66790.18928966948;
vector<double> BETA_UPPER_coefs_long{-0.16855192717439046, -0.01640219094605889, 0.018064649395180578, -10.520513817159689, -2.702334015114039, 9.174458171240065, -1.137480046902519, 3.5195004714826537, 5.327204665621876, 0.0317393122877201, 0.1338110939714513, -0.06779231322595133, -0.13997531479041056, -0.2363277215696596, 0.051530588539984434, 0.03621799054617244, 0.1575622090785368, 0.07860188483066143, -0.01969268477335895};

uint_t GAMMA{1000};
double GAMMA_offset_short = -60546.46405686842;
vector<double> GAMMA_coefs_short{0.12732446471605136, 0.327623916634546, -0.019151703020875047, 5.64158980970592, 13.437659885899224, -4.61217548938969, 0.9417914080663436, -17.811551475615104, 2.2706904002585033, -0.02091727220918377, -0.10651643666382732, 0.044059892344741794, 0.05983666044243362, 0.19745425861915095, -0.038929520299518745, -0.046234527797891424, -0.012487807436476135, -0.10578599818941004, 0.012588487087987682};
double GAMMA_offset_long = -26646.07072486503;
vector<double> GAMMA_coefs_long{0.03864260110196965, 0.3406454688777138, -0.010619076924094537, -0.08600407965808962, 12.738141447121, 0.3272502993290467, 0.24171372502264926, -17.114111068044924, 5.515224280071478, 6.416145689933962e-05, -0.04777145036361302, -0.005997604071250332, -0.00404997490126844, 0.0985455303757918, 0.0029383893885630897, -0.03290337399684122, 0.06484633511409048, -0.07887028825216795, -0.002913310767961086};

double NU{0.27};
double NU_offset_short = -3.5431692196659483;
vector<double> NU_coefs_short{9.614760165020386e-06, 2.6714758409079962e-06, -1.0581996932027292e-06, 0.0005892434571052373, 0.00021452740943919856, -0.0005074789301612155, 5.901249813534453e-05, -0.0002886650088768909, -0.00026569336037622117, -1.4511654216605618e-06, -9.130493124622107e-06, 2.673785241776944e-06, 9.686542580287665e-06, 1.6248367845285666e-05, -1.7383651836276838e-06, -2.7961894017848717e-06, -1.0167609785014904e-05, -5.886036514353342e-06, 7.018239925079466e-07};
double NU_offset_long = 0.33534628628830004;
vector<double> NU_coefs_long{4.3446454408298134e-07, -1.6619350857434025e-06, -3.044524638125831e-07, 1.2532090260360073e-05, -6.730041945466833e-05, -7.707047566374336e-05, -6.434358946338324e-06, 4.9158128194781965e-05, -6.563491547972607e-05, 3.6980825241724823e-07, -7.853631439489744e-07, -9.705926588836747e-07, 1.9608374646049707e-06, 1.0017737092148316e-06, 1.0637269914316413e-06, -2.2774406166735962e-07, -2.878996854523359e-06, 6.871809557489979e-07, -3.39569448304759e-07};

double MU1{0.55};
double MU1_offset_short = 1.9707489954684145;
vector<double> MU1_coefs_short{-4.04677813927756e-07, -2.5738994281553754e-05, 3.3158638591960184e-07, 0.00014614577571967898, -0.0009403812936785652, -0.00019229126781268377, -8.50535899937691e-06, 0.001234872589127959, -0.0005134443203690162, 1.9186865829215107e-07, 5.630189481817564e-07, -6.178629953290014e-07, 3.89497497236835e-06, -1.7785150248552285e-06, 1.2138456509545766e-06, 1.8636059976342764e-06, -9.612226220477501e-06, 4.4127333581410685e-06, -2.3791747079249401e-07};
double MU1_offset_long = 1.6592300742098829;
vector<double> MU1_coefs_long{-5.860171060763858e-07, -2.1803725057455e-05, 6.077432434291344e-07, 0.00013566768524571476, -0.0007846435754923056, -0.00010857145429314545, 4.991392525958697e-06, 0.001078096125987197, -0.00041041872477886384, -6.046276771758687e-07, 2.091491452350509e-06, 1.7648585615823567e-06, 1.1128866816899003e-06, -4.5697609956640585e-06, -1.3451291147829322e-06, 1.7808291115114703e-06, -5.014223486662619e-06, 4.298330088226114e-06, 5.853156795400849e-07};

double MU2{858.65};
double MU2_offset_short = 7860.834049895574;
vector<double> MU2_coefs_short{-0.018272953598814166, -0.01156466354856006, 0.0022330906960555826, -1.0576042677215227, -0.6446204877034165, 0.9400662068558766, -0.1291392963000664, 0.8558631503807875, 0.3918243746667503, 0.0025885152448257972, 0.01662524908474417, -0.004718418250073582, -0.016486699472224406, -0.029701763639795185, 0.003064184979817922, 0.005279464244824987, 0.016755559094899085, 0.011053070371361627, -0.0012083821594834187};
double MU2_offset_long = 1431.596825672686;
vector<double> MU2_coefs_long{-0.001359404745030391, -0.014194474273487686, 0.0004822813012112276, 0.02724052679679762, -0.527347229961283, -0.015216844873210887, -0.012879650397186245, 0.7097074530852184, -0.23061036689009634, 0.0007647361276227813, -0.0014283436875299799, -0.0025334671090357693, 0.003951205265180383, 0.0027889106586660843, 0.002838343906100007, 0.00028598921314028787, -0.006420851666351679, -7.640479564813625e-05, -0.0008714469419294193};

long long INSERTIONS1{70368744177664};
double INSERTIONS1_offset_short = -51439351.27738744;;
vector<double> INSERTIONS1_coefs_short{163.23594359699473, 67.94989194071387, -29.305012026008455, 8728.110119419483, 4103.552805105302, -10144.330100929037, 998.2618519511254, -6649.073918437926, -4910.489932354872, -6.969886167178339, -162.4716342281213, 0.9573071398141263, 183.19432496331598, 289.30077207207717, 14.592266630732228, -42.38507197665713, -223.12571660958997, -79.24980094197767, -2.6297891627160226};;
double INSERTIONS1_offset_long = 8872096.357140318;
vector<double> INSERTIONS1_coefs_long{-29.990829315279978, 282.29955748676105, -4.147722991967306, -4050.5549757779686, 9520.70399642825, 3616.243225906391, -734.4881105425353, -13667.088852632445, 6771.857226974817, 21.71618908212981, -20.375532818271353, -64.11840604050285, -21.850767069967645, 57.949896070994, 57.38754866726993, -19.687343986611033, 73.88981193098188, -63.63146655052377, -22.04728035788547};;

long long INSERTIONS2{70368744177664};
double INSERTIONS2_offset_short = -54795658.4725531;;
vector<double> INSERTIONS2_coefs_short{141.5729063916486, 29.470255441243285, -10.78743861446438, 9136.390725341078, 3078.5506705952776, -6968.112984760266, 1199.6223108923652, -3257.565848426473, -3920.6702003631444, -32.22686672610067, -111.2057962227886, 70.2771929863359, 104.06618914139591, 199.12210708645216, -56.98492129332249, -29.66060819792046, -107.61483866080755, -79.30074233505114, 20.97475568958459};;
double INSERTIONS2_offset_long = 845283.6591413496;
vector<double> INSERTIONS2_coefs_long{6.728271353775369, -6.141368736503171, 0.8427568593364666, 563.7603298480693, -8.422428607816622, -282.88960027301897, 258.4857021980947, 429.03585592518124, -347.3660928230543, -10.986668594322055, 24.266142087850834, 34.34832345309711, -33.482361134681824, -46.315789230633435, -35.009298444298054, 11.677751224783808, 30.699140951428607, 19.454617788603066, 12.013884395007862};;

long long REMOVALS{70368744177664};
double REMOVALS_offset_short = 8833.714578757583;;
vector<double> REMOVALS_coefs_short{-0.022311940685474648, 0.008259167545594309, 0.0025273876602800917, -1.4396611751273436, 0.034819237310209215, 1.3349041632071441, -0.1350060272825917, -0.006910699351060222, 0.9313283404547212, 0.0010180167405792009, 0.028496162253395897, 0.0014197958507200035, -0.03417093258913126, -0.05127704569901694, -0.004226949091173692, 0.008439656785691047, 0.03865613723027525, 0.017137391938625367, 0.0010233815164340607};;
double REMOVALS_offset_long = -11139.148760298089;
vector<double> REMOVALS_coefs_long{0.028196583468494216, 0.009740150006155156, -0.002109596402455258, 1.7922118219438048, 0.7722216357126154, -1.3600433599736441, 0.2804961930275687, -0.7989278460473227, -0.7164585949627102, -0.008435798365603719, -0.014994206503025586, 0.020926903154711768, 0.011434787274444254, 0.025792385519546088, -0.018692799356565613, -0.003979284764125867, -0.01097157797148873, -0.010361541779434066, 0.006633734002500448};;

long long LS{70368744177664};
double LS_offset_short = 23.544264828195978;;
vector<double> LS_coefs_short{-3.1428613314250275e-05, -7.466392049127425e-05, 3.432151692309158e-06, -0.0015576091257489583, -0.0031310782225555897, 0.0010006654860603174, -0.00023442867335594082, 0.00402524554306072, -0.0005285838449071281, -2.3218208131956984e-06, 5.4958941935256286e-05, 1.6690059396307803e-05, -4.5137560355084306e-05, -0.00010777783275223704, -1.9877335487927874e-05, 2.0887068706072947e-05, 3.2258110082484776e-05, 5.6122142339049715e-05, 6.835333578943e-06};;
double LS_offset_long = 23.68197911314825;
vector<double> LS_coefs_long{-3.1048028105707796e-05, -8.054341675161087e-05, 3.4220617836504847e-06, -0.0015112275645366429, -0.003320499504185517, 0.0009024464709089742, -0.0001796265817553635, 0.004336443816487326, -0.0006923887848245548, -3.695980772364727e-06, 5.9447697845260475e-05, 2.160611545833916e-05, -4.904194826994867e-05, -0.00011712956278065263, -2.4903912814852346e-05, 2.226831553039531e-05, 3.499658899724385e-05, 6.139450212964197e-05, 8.610070183417757e-06};;

long long CONS{70368744177664};
double CONS_offset_short = 146.20663744092664;;
vector<double> CONS_coefs_short{-0.0003453041548321359, -0.0001732782327455915, 3.307635947085614e-05, -0.021127085996612255, -0.01086767859287708, 0.016864822422111334, -0.002575462911678425, 0.01339330763567659, 0.00773094655695752, 5.160170678476139e-05, 0.0003545490563766178, -8.763229970082754e-05, -0.0003526503448383706, -0.0006404413503875037, 5.455574173641397e-05, 0.00011713476315688844, 0.0003384151613668202, 0.00026287724808500193, -2.207202591661479e-05};;
double CONS_offset_long = 70.09517284126407;
vector<double> CONS_coefs_long{-0.0001602315492867748, -0.00012684634243542017, 1.709945383469373e-05, -0.009394522389472021, -0.006650961034461582, 0.007585399912938571, -0.0011010164890996944, 0.008580561812536606, 0.0026784836487041023, 2.225619344465017e-05, 0.00017037912405599658, -3.682873476267003e-05, -0.00016776578849791448, -0.0003064365511004875, 2.2799156339406535e-05, 5.984901451875411e-05, 0.00015303917044305946, 0.00012804545416846903, -9.058147404649298e-06};;

// FIXED PARAMETERS
double INITIAL_WEIGHT{1.0};

ALNS_setup methods = ALNS_setup();

const char *insertions_labels[INSERT_COUNT]{};
//         [RANDOM_INSERT] = "RANDOM_INSERT",
//         [FIXED_INSERT] = "FIXED_INSERT",
//         [CHEAPEST_INSERT] = "CHEAPEST_INSERT",
//         [MOST_EXPENSIVE_INSERT] = "MOST_EXPENSIVE_INSERT",
//         [LRD1_INSERT] = "LRD1_INSERT",
//         [LRD2_INSERT] = "LRD2_INSERT",
//         [HRD_INSERT] = "HRD_INSERT",
//         [LONGEST1_INSERT] = "LONGEST1_INSERT",
//         [LONGEST2_INSERT] = "LONGEST2_INSERT",
//         [SHORTEST1_INSERT] = "SHORTEST1_INSERT",
//         [SHORTEST2_INSERT] = "SHORTEST2_INSERT",
//         [MOST_EXCLUSIONS_INSERT] = "MOST_EXCLUSIONS_INSERT",
//         [LEAST_EXCLUSIONS_INSERT] = "LEAST_EXCLUSIONS_INSERT",
//         [MOST_USED_INSERT] = "MOST_USED_INSERT",
//         [LEAST_USED_INSERT] = "LEAST_USED_INSERT",

//         [N1_RANDOM_INSERT] = "N1_RANDOM_INSERT",
//         [N1_FIXED_INSERT] = "N1_FIXED_INSERT",
//         [N1_CHEAPEST_INSERT] = "N1_CHEAPEST_INSERT",
//         [N1_MOST_EXPENSIVE_INSERT] = "N1_MOST_EXPENSIVE_INSERT",
//         [N1_LRD1_INSERT] = "N1_LRD1_INSERT",
//         [N1_HRD_INSERT] = "N1_HRD_INSERT",
//         [N1_LONGEST1_INSERT] = "N1_LONGEST1_INSERT",
//         [N1_SHORTEST1_INSERT] = "N1_SHORTEST1_INSERT",
//         [N1_MOST_EXCLUSIONS_INSERT] = "N1_MOST_EXCLUSIONS_INSERT",
//         [N1_LEAST_EXCLUSIONS_INSERT] = "N1_LEAST_EXCLUSIONS_INSERT",
//         [N1_MOST_USED_INSERT] = "N1_MOST_USED_INSERT",
//         [N1_LEAST_USED_INSERT] = "N1_LEAST_USED_INSERT",

//         [N2_CHEAPEST_INSERT] = "N2_CHEAPEST_INSERT",
//         [N2_MOST_EXPENSIVE_INSERT] = "N2_MOST_EXPENSIVE_INSERT",
//         [N2_LRD1_INSERT] = "N2_LRD1_INSERT",
//         [N2_HRD_INSERT] = "N2_HRD_INSERT",
//         [N2_LONGEST1_INSERT] = "N2_LONGEST1_INSERT",
//         [N2_SHORTEST1_INSERT] = "N2_SHORTEST1_INSERT",
//         [N2_MOST_EXCLUSIONS_INSERT] = "N2_MOST_EXCLUSIONS_INSERT",
//         [N2_LEAST_EXCLUSIONS_INSERT] = "N2_LEAST_EXCLUSIONS_INSERT",
//         [N2_MOST_USED_INSERT] = "N2_MOST_USED_INSERT",
//         [N2_LEAST_USED_INSERT] = "N2_LEAST_USED_INSERT",

//         [N3_CHEAPEST_INSERT] = "N3_CHEAPEST_INSERT",
//         [N3_MOST_EXPENSIVE_INSERT] = "N3_MOST_EXPENSIVE_INSERT",
//         [N3_LRD1_INSERT] = "N3_LRD1_INSERT",
//         [N3_HRD_INSERT] = "N3_HRD_INSERT",
//         [N3_LONGEST1_INSERT] = "N3_LONGEST1_INSERT",
//         [N3_SHORTEST1_INSERT] = "N3_SHORTEST1_INSERT",
//         [N3_MOST_EXCLUSIONS_INSERT] = "N3_MOST_EXCLUSIONS_INSERT",
//         [N3_LEAST_EXCLUSIONS_INSERT] = "N3_LEAST_EXCLUSIONS_INSERT",
//         [N3_MOST_USED_INSERT] = "N3_MOST_USED_INSERT",
//         [N3_LEAST_USED_INSERT] = "N3_LEAST_USED_INSERT",

// };

const char *removals_labels[REMOVE_COUNT]{};
//         [RANDOM_REMOVE] = "RANDOM_REMOVE",
//         [CHEAPEST_REMOVE] = "CHEAPEST_REMOVE",
//         [MOST_EXPENSIVE_REMOVE] = "MOST_EXPENSIVE_REMOVE",
//         [LRD_REMOVE] = "LRD_REMOVE",
//         [HRD_REMOVE] = "HRD_REMOVE",
//         [LONGEST_REMOVE] = "LONGEST_REMOVE",
//         [SHORTEST_REMOVE] = "SHORTEST_REMOVE",
//         [MOST_EXCLUSIONS_REMOVE] = "MOST_EXCLUSIONS_REMOVE",
//         [LEAST_EXCLUSIONS_REMOVE] = "LEAST_EXCLUSIONS_REMOVE",
//         [MOST_USED_REMOVE] = "MOST_USED_REMOVE",
//         [LEAST_USED_REMOVE] = "LEAST_USED_REMOVE"
// };

const char *constructions_labels[CONSTRUCTION_COUNT]{};
//         [RANDOM_CONSTRUCT] = "RANDOM_CONSTRUCT",
//         [LONGEST1_CONSTRUCT] = "LONGEST1_CONSTRUCT",
//         [HRD_CONSTRUCT] = "HRD_CONSTRUCT",
//         [MOST_EXPENSIVE_CONSTRUCT] = "MOST_EXPENSIVE_CONSTRUCT",
//         [CHEAPEST_CONSTRUCT] = "CHEAPEST_CONSTRUCT",
//         [LRD1_CONSTRUCT] = "LRD1_CONSTRUCT",
//         [LRD2_CONSTRUCT] = "LRD2_CONSTRUCT",
//         [FIXED_CONSTRUCT] = "FIXED_CONSTRUCT",
//         [LONGEST2_CONSTRUCT] = "LONGEST2_CONSTRUCT",
//         [MOST_EXCLUSIONS_CONSTRUCT] = "MOST_EXCLUSIOS_CONSTRUCT",
//         [SHORTEST1_CONSTRUCT] = "SHORTEST1_CONSTRUCT",
//         [SHORTEST2_CONSTRUCT] = "SHORTEST2_CONSTRUCT"
// };

const char *ls_labels[LS_COUNT]{};
//         [ONE_SHIFT] = "ONE_SHIFT",
//         [EXCL_TWO_SHIFT] = "EXCL_TWO_SHIFT",
//         [RAND_TWO_SHIFT] = "RAND_TWO_SHIFT"
// };

int get_insertion_idx(char *label) {
    for (int i = 0; i < INSERT_COUNT; ++i) {
        if (!strcmp(label, insertions_labels[i])) return i;
    }
    return -1;
}

int get_removal_idx(char *label) {
    for (int i = 0; i < REMOVE_COUNT; ++i) {
        if (!strcmp(label, removals_labels[i])) return i;
    }
    return -1;
}

int get_construct_idx(const char *label) {
    for (int i = 0; i < CONSTRUCTION_COUNT; ++i) {
        if (!strcmp(label, constructions_labels[i])) return i;
    }
    return -1;
}

int get_ls_idx(char *label) {
    for (int i = 0; i < LS_COUNT; ++i) {
        if (!strcmp(label, ls_labels[i])) return i;
    }
    return -1;
}

using namespace std;

void dump_config() {
    cout << "parameters {" << endl;
    // extended objective weights
    cout << "\t" << BETA_LOWER_LABEL << " : " << BETA_LOWER << endl;
    cout << "\t" << BETA_UPPER_LABEL << " : " << BETA_UPPER << endl;
    cout << "\t" << GAMMA_LABEL << " : " << GAMMA << endl;
    // local search
    cout << "\t" << LS_FIRST_IMPROVE_LABEL << " : " << LS_FIRST_IMPROVE << endl;
    cout << "\t" << TWO_SHIFT_LIMIT_LABEL << " : " << TWO_SHIFT_LIMIT << endl;
    cout << "\t" << ONE_SHIFT_DEPTH_LABEL << " : " << ONE_SHIFT_DEPTH << endl;
    // ALNS
    cout << "\t" << ALNS_DEPTH_LABEL << " : " << ALNS_DEPTH << endl;
    cout << "\t" << OMEGA_1_LABEL << " : " << OMEGA_1 << endl;
    cout << "\t" << OMEGA_2_LABEL << " : " << OMEGA_2 << endl;
    cout << "\t" << OMEGA_4_LABEL << " : " << OMEGA_4 << endl;
    cout << "\t" << LAMBDA_LABEL << " : " << LAMBDA << endl;
    cout << "\t" << NU_LABEL << " : " << NU << endl;
    cout << "\t" << MU1_LABEL << " : " << MU1 << endl;
    cout << "\t" << MU2_LABEL << " : " << MU2 << endl;
    cout << "\t" << LENGTH_BATCH_LABEL << " : " << LENGTH_BATCH << endl;
    cout << "\t" << COST_BATCH_LABEL << " : " << COST_BATCH << endl;
    cout << "\t" << RD_BATCH_LABEL << " : " << RD_BATCH << endl;
    cout << "\t" << ACCEPT_TOLERANCE_LABEL << " : " << ACCEPT_TOLERANCE << endl;

    // greedy_search only
    cout << "\t" << ITERS_MAX_LABEL << " : " << ITERS_MAX << endl;
    // other
    cout << "\t" << SEED_LABEL << " : " << SEED << endl;
    cout << "\t" << TIME_LIMIT_LABEL << " : " << TIME_LIMIT << endl;
    cout << "}" << endl;
}

string format_output_path(string directories, string input) {
    /* formats output path based on problem name and passed directory tree */
    ostringstream output;
    output << directories << "/";
    string name = input.substr(input.find_last_of('/') + 1, input.length());
    name = name.substr(0, name.find("."));
    output << name << ".txt";
    return output.str();
}

void parse_global_params(int argc, char *argv[]) {
    // INPUT_PATH = argv[1];
    // if (argc % 2) util::throw_err("Wrong number of parameters");
    for (int i = 1; i < argc; i += 1) {
        char *label = argv[i];
        string val;
        if (i != argc - 1) val = argv[i + 1];
        int idx;
        // extended objective weights
        if (!strcmp(label, BETA_LOWER_LABEL)) BETA_LOWER = util::convert_to_int(val);
        else if (!strcmp(label, BETA_UPPER_LABEL)) BETA_UPPER = util::convert_to_int(val);
        else if (!strcmp(label, GAMMA_LABEL)) GAMMA = util::convert_to_int(val);
            // local search
        else if (!strcmp(label, TWO_SHIFT_LIMIT_LABEL)) TWO_SHIFT_LIMIT = util::convert_to_int(val);
        else if (!strcmp(label, ONE_SHIFT_DEPTH_LABEL)) ONE_SHIFT_DEPTH = stod(val);
        else if (!strcmp(label, LS_FIRST_IMPROVE_LABEL)) LS_FIRST_IMPROVE = (bool) stoi(val);
            // ALNS
        else if (!strcmp(label, ALNS_DEPTH_LABEL)) ALNS_DEPTH = min(stof(val), (float) 1.0);
        else if (!strcmp(label, OMEGA_1_LABEL)) OMEGA_1 = stod(val);
        else if (!strcmp(label, OMEGA_2_LABEL)) OMEGA_2 = stod(val);
        else if (!strcmp(label, OMEGA_4_LABEL)) OMEGA_4 = stod(val);
        else if (!strcmp(label, LAMBDA_LABEL)) LAMBDA = stod(val);
        else if (!strcmp(label, NU_LABEL)) NU = stod(val);
        else if (!strcmp(label, MU1_LABEL)) MU1 = stod(val);
        else if (!strcmp(label, MU2_LABEL)) MU2 = stod(val);
        else if (!strcmp(label, LENGTH_BATCH_LABEL)) LENGTH_BATCH = stod(val);
        else if (!strcmp(label, COST_BATCH_LABEL)) COST_BATCH = stod(val);
        else if (!strcmp(label, RD_BATCH_LABEL)) RD_BATCH = stod(val);
        else if (!strcmp(label, ACCEPT_TOLERANCE_LABEL)) ACCEPT_TOLERANCE = stod(val);
            // greedy_search only
        else if (!strcmp(label, ITERS_MAX_LABEL)) ITERS_MAX = stoi(val);
            // other
        else if (!strcmp(label, INPUT_PATH_LABEL)) INPUT_PATH = val;
        else if (!strcmp(label, OUTPUT_PATH_LABEL)) OUTPUT_PATH = val;
        else if (!strcmp(label, TIME_LIMIT_LABEL)) TIME_LIMIT = 1000 * util::convert_to_int(val) - TIME_RESERVE;
        else if (!strcmp(label, SEED_LABEL)) SEED = stoi(val);
        else if (!strcmp(label, SEED_LABEL));
        else if (!strcmp(label, TEAM_ID_LABEL)) {
            if (argc == 2) {
                cout << "J" << TEAM_ID << endl;
                exit(TEAM_ID);
            } else {
                cout << "J" << TEAM_ID << endl;
                RETURN_ID = true;
            }
        } // does nothing
            // insertions
        else if ((idx = get_insertion_idx(label)) != -1) {
            methods.insertions[idx] = util::convert_to_int(val);
            methods.default_insertions = false;
            // removals
        } else if ((idx = get_removal_idx(label)) != -1) {
            methods.removals[idx] = util::convert_to_int(val);
            methods.default_removals = false;
            // construction
        } else if (!strcmp(label, CONSTRUCTION_LABEL)) {
            int num = util::convert_to_int(val);
            if (num >= 0 && num < CONSTRUCTION_COUNT) {
                methods.construction = num;
            }
            // local search
        } else if ((idx = get_ls_idx(label)) != -1) {
            methods.ls[idx] = util::convert_to_int(val);
            methods.default_ls = false;
        }
    }
}

double evaluate_quadratic(double offset, vector<double> coefs, double x0, double x1, double x2) {
    vector<double> features{x0, x1, x2, pow(x0, 2), x0 * x1, x0 * x2, pow(x1,2), x1 * x2, pow(x2, 2)};
    double val = offset;
    for (int i = 0; i < features.size(); ++i) {
        val += coefs[i] * features[i];
    }
    return val;
}

double evaluate_cubic(double offset, vector<double> coefs, double x0, double x1, double x2) {
    vector<double> features{x0, x1, x2, pow(x0, 2), x0 * x1, x0 * x2, pow(x1, 2), x1 * x2, pow(x2, 2), pow(x0, 3),
                            pow(x0, 2) * x1, pow(x0, 2) * x2, x0 * pow(x1, 2), x0 * x1 * x2, x0 * pow(x2, 2), pow(x1, 3), pow(x1, 2) * x2, x1 * pow(x2,2), pow(x2, 3)};
    double val = offset;
    for (int i = 0; i < features.size(); ++i) {
        val += coefs[i] * features[i];
    }
    return val;
};

double round3(double var)
{
    // 37.66666 * 100 =3766.66
    // 3766.66 + .5 =3767.16    for rounding off value
    // then type cast to int so value is 3767
    // then divided by 100 so the value converted into 37.67
    double value = (int)(var * 1000 + .5);
    return (double)value / 1000;
}


void determine_dependent_params(ROADEF::Instance *instance) {
    double x0 = instance->get_intervention_count();
    double x1 = instance->get_horizon_num();
    double x2 = instance->get_exclusion_pairs().size();

    methods.default_insertions = false;
    methods.default_removals = false;
    methods.default_ls = false;

        // all_15min_v4
        ITERS_MAX = 10000;
        ALNS_DEPTH = 0.75;
        LENGTH_BATCH = 0.5;
        COST_BATCH = 0.5;
        RD_BATCH = 0.5;
        ACCEPT_TOLERANCE = 0.01;
        OMEGA_1 = 100;
        OMEGA_2 = 50;
        OMEGA_4 = 1;
        LAMBDA = 0.9;
        ONE_SHIFT_DEPTH = 1;
        TWO_SHIFT_LIMIT = 1;
        LS_FIRST_IMPROVE = false;
        BETA_LOWER = 100000;
        BETA_UPPER = 100000;
        GAMMA = 100000;
        NU = 0.25;
        MU1 = 0.5;
        MU2 = 500;
        methods.insertions = vector<uint_t>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        methods.removals = vector<uint_t>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        methods.ls = vector<uint_t>{1, 1, 1};
        methods.construction = 3;
}

/*
 * Returns true, if more than TIME_LIMIT elapsed from BEGIN time.
 */
bool stop() {
    return (chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - BEGIN).count() > TIME_LIMIT);
}

ALNS_setup::ALNS_setup() {
    this->default_insertions = true;
    this->default_removals = true;
    this->default_ls = true;
    this->insertions = vector<uint_t>(INSERT_COUNT, 0);
    this->removals = vector<uint_t>(REMOVE_COUNT, 0);
    this->ls = vector<uint_t>(LS_COUNT, 0);
//    this->construction = MOST_EXPENSIVE_CONSTRUCT;  // v9.8
    this->construction = HRD_CONSTRUCT;               // v11.2, v12.3
}

void ALNS_setup::check_setup() {
    if (this->default_insertions) {
//        for (int i = 0; i < INSERT_COUNT; ++i) this->insertions[i] = 1;                     // all
//        this->insertions = vector<uint_t>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};            // all non-hybrid
//        this->insertions = vector<uint_t>{1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1,
//                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};            // v9.8 setup
//        this->insertions = vector<uint_t>{1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
//                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  // v11.2 setup
        this->insertions = vector<uint_t>{0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0};  // v12.3 setup
    }

    if (this->default_removals) {
//        for (int i = 0; i < REMOVE_COUNT; ++i) this->removals[i] = 1;                       // all
//        this->removals = vector<uint_t>{1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1};                 // v9.8 setup
        this->removals = vector<uint_t>{0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1};                   // v11.2, v12.3
    }
    if (this->default_ls) {
        for (int i = 0; i < LS_COUNT; ++i) this->ls[i] = 1;                               // all, v11.2, v12.3
//        this->ls = vector<uint_t>{1, 1, 0};                                                 // v9.8 setup
    }
}

